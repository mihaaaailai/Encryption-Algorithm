{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww33400\viewh17940\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #include <iostream>\
#include <string>\
#include <openssl/aes.h>\
#include <openssl/rand.h>\
\
using namespace std;\
\
string encrypt(const string& plaintext, const string& key) \{\
    string ciphertext;\
    \
    unsigned char iv[AES_BLOCK_SIZE];\
    RAND_bytes(iv, AES_BLOCK_SIZE);\
    \
    AES_KEY aesKey;\
    AES_set_encrypt_key(reinterpret_cast<const unsigned char*>(key.c_str()), 128, &aesKey);\
    \
    int numBlocks = (plaintext.size() + AES_BLOCK_SIZE - 1) / AES_BLOCK_SIZE;\
    for (int i = 0; i < numBlocks; ++i) \{\
        unsigned char input[AES_BLOCK_SIZE] = \{0\};\
        unsigned char output[AES_BLOCK_SIZE] = \{0\};\
        \
        int offset = i * AES_BLOCK_SIZE;\
        int length = min(static_cast<int>(plaintext.size()) - offset, AES_BLOCK_SIZE);\
        \
        memcpy(input, plaintext.c_str() + offset, length);\
        AES_cbc_encrypt(input, output, AES_BLOCK_SIZE, &aesKey, iv, AES_ENCRYPT);\
        \
        ciphertext.append(reinterpret_cast<char*>(output), AES_BLOCK_SIZE);\
    \}\
    \
    ciphertext = string(reinterpret_cast<const char*>(iv), AES_BLOCK_SIZE) + ciphertext;\
    \
    return ciphertext;\
\}\
\
string decrypt(const string& ciphertext, const string& key) \{\
    string plaintext;\
    \
    unsigned char iv[AES_BLOCK_SIZE];\
    memcpy(iv, ciphertext.c_str(), AES_BLOCK_SIZE);\
    \
    AES_KEY aesKey;\
    AES_set_decrypt_key(reinterpret_cast<const unsigned char*>(key.c_str()), 128, &aesKey);\
    \
    int numBlocks = (ciphertext.size() - AES_BLOCK_SIZE) / AES_BLOCK_SIZE;\
    for (int i = 0; i < numBlocks; ++i) \{\
        unsigned char input[AES_BLOCK_SIZE] = \{0\};\
        unsigned char output[AES_BLOCK_SIZE] = \{0\};\
        \
        int offset = i * AES_BLOCK_SIZE + AES_BLOCK_SIZE;\
        memcpy(input, ciphertext.c_str() + offset, AES_BLOCK_SIZE);\
        AES_cbc_encrypt(input, output, AES_BLOCK_SIZE, &aesKey, iv, AES_DECRYPT);\
        \
        plaintext.append(reinterpret_cast<char*>(output), AES_BLOCK_SIZE);\
    \}\
    \
    if (!plaintext.empty()) \{\
        int padding = plaintext[plaintext.length() - 1];\
        if (padding <= AES_BLOCK_SIZE) \{\
            plaintext.resize(plaintext.length() - padding);\
        \}\
    \}\
    \
    return plaintext;\
\}\
\
int main() \{\
    string plaintext;\
    string key = "ThisIsASecretKey";\
    \
    cout << "Introduceti textul de criptat: ";\
    getline(cin, plaintext);\
    \
    string encryptedText = encrypt(plaintext, key);\
    cout << "Textul criptat: " << encryptedText << endl;\
    \
    string decryptedText = decrypt(encryptedText, key);\
    cout << "Textul decriptat: " << decryptedText << endl;\
    \
    return 0;\
\}\
}